[gd_scene load_steps=19 format=3 uid="uid://dupctds10emrk"]

[ext_resource type="Script" path="res://addons/zylann.hterrain/hterrain.gd" id="1_4wp4p"]
[ext_resource type="Resource" path="res://Map/MapData/data.hterrain" id="2_ix5cc"]
[ext_resource type="Script" path="res://addons/zylann.hterrain/hterrain_texture_set.gd" id="2_j7f2d"]
[ext_resource type="Script" path="res://Map/DirectionalLight3D.gd" id="4_stqde"]
[ext_resource type="Texture2D" uid="uid://p34u0t1q2bjh" path="res://Map/MainMap_slot0_albedo_bump.png" id="4_v0sjs"]
[ext_resource type="PackedScene" uid="uid://chgqj2khdq3ei" path="res://Actors/Friendly/playerTrue.tscn" id="5_6bj7l"]
[ext_resource type="Texture2D" uid="uid://bsdds6vbxdl3o" path="res://Map/MainMap_slot1_albedo_bump.png" id="5_qj406"]
[ext_resource type="Texture2D" uid="uid://cj2osdhkr66da" path="res://Map/MainMap_slot2_albedo_bump.png" id="6_c7e61"]
[ext_resource type="Texture2D" uid="uid://dkcj14eqwu1o0" path="res://Map/MainMap_slot3_albedo_bump.png" id="7_1j8oc"]
[ext_resource type="Texture2D" uid="uid://dqa38md6pt1yf" path="res://Map/MainMap_slot0_normal_roughness.png" id="8_iylel"]
[ext_resource type="Texture2D" uid="uid://bv8orty7t3qud" path="res://Map/MainMap_slot1_normal_roughness.png" id="9_0i6t4"]
[ext_resource type="Texture2D" uid="uid://cc7qqod5r6q2p" path="res://Map/MainMap_slot2_normal_roughness.png" id="10_vcev5"]
[ext_resource type="Texture2D" uid="uid://dcqbi4t41pyh4" path="res://Map/MainMap_slot3_normal_roughness.png" id="11_705su"]

[sub_resource type="Resource" id="Resource_gquqd"]
script = ExtResource("2_j7f2d")
mode = 0
textures = [[ExtResource("4_v0sjs"), ExtResource("5_qj406"), ExtResource("6_c7e61"), ExtResource("7_1j8oc")], [ExtResource("8_iylel"), ExtResource("9_0i6t4"), ExtResource("10_vcev5"), ExtResource("11_705su")]]

[sub_resource type="Shader" id="Shader_hnp5x"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.1.3.stable's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;

uniform sampler2D cloud_texture;
uniform sampler2D cloud_texture2;

void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT0_SIZE) {
			sky = LIGHT0_COLOR * LIGHT0_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
			sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT1_ENABLED) {
		float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT1_SIZE) {
			sky = LIGHT1_COLOR * LIGHT1_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
			sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT2_ENABLED) {
		float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT2_SIZE) {
			sky = LIGHT2_COLOR * LIGHT2_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
			sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT3_ENABLED) {
		float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT3_SIZE) {
			sky = LIGHT3_COLOR * LIGHT3_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
			sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;

	COLOR = mix(ground, sky, step(0.0, EYEDIR.y));
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_esjc6"]
shader = SubResource("Shader_hnp5x")
shader_parameter/sky_top_color = Color(0.529412, 0.807843, 0.921569, 1)
shader_parameter/sky_horizon_color = Color(0.611765, 0.745098, 0.760784, 1)
shader_parameter/sky_curve = 0.15
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover_modulate = Color(1, 1, 1, 1)
shader_parameter/ground_bottom_color = Color(0.2, 0.169, 0.133, 1)
shader_parameter/ground_horizon_color = Color(0.6463, 0.6558, 0.6708, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.523599
shader_parameter/sun_curve = 0.15

[sub_resource type="Sky" id="Sky_mt83e"]
sky_material = SubResource("ShaderMaterial_esjc6")

[sub_resource type="Environment" id="Environment_2myy4"]
background_mode = 2
sky = SubResource("Sky_mt83e")
tonemap_mode = 2
tonemap_exposure = 0.45

[node name="Map" type="Node3D"]

[node name="HTerrain" type="Node3D" parent="."]
script = ExtResource("1_4wp4p")
_terrain_data = ExtResource("2_ix5cc")
chunk_size = 32
collision_enabled = true
collision_layer = 1
collision_mask = 1
shader_type = "Classic4Lite"
custom_shader = null
custom_globalmap_shader = null
texture_set = SubResource("Resource_gquqd")
render_layers = 1
cast_shadow = 1
shader_params/u_ground_uv_scale = 20
shader_params/u_depth_blending = false
shader_params/u_triplanar = true
shader_params/u_tile_reduction = null

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(0.205452, 0.921063, 0.330806, -0.865961, 0.0136094, 0.499926, 0.455961, -0.389176, 0.800401, -0.565475, 6.54913, -0.892776)
script = ExtResource("4_stqde")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_2myy4")

[node name="bird_body" parent="." instance=ExtResource("5_6bj7l")]
transform = Transform3D(0.4, 0, 0, 0, 0.4, 0, 0, 0, 0.4, 422.928, 238.534, 258.502)
